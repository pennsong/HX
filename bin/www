#!/usr/bin/env node
var debug = require('debug')('HX');
var app = require('../app');
var monk = require('monk');
var db = monk('localhost:27017/HX');

app.set('port', process.env.PORT || 3000);

var server = app.listen(app.get('port'), function() {
    debug('Express server listening on port ' + server.address().port);
});

var io = require('socket.io')(server);

var users={};

io.sockets.on('connection', function (socket) {
    socket.on('joinChat', function (name, fn) {
        //console.log(name);
        users[name] = socket;
        console.log(users);
        fn(socket.id);
    });
    console.log("new connect:" + socket.id);
    socket.on('clientMessage', function(msg, fn) {
        console.log(msg);
        db.get('chat').insert(
            {
                from: msg.from,
                to: msg.to,
                content: msg.content,
                status: '未读'
            },
            function(err, result)
            {
                if (err)
                {
                    //todo
                }
                else
                {
                    fn(msg);
                    //send to receiver
                    if (users[msg.to])
                    {
                        users[msg.to].emit('serverMessage', msg, function(read){
                            if (read == true)
                            {
                                db.get('chat').findAndModify(
                                    {
                                        _id: result._id
                                    }, // query
                                    {
                                        $set:
                                        {
                                            status: '已读'
                                        }
                                    },
                                    {}, // options
                                    function(err, object) {
                                        if (err){
                                            console.log("err:" + err);
                                        }else{
                                            console.log("ok:" + read);
                                        }
                                    });
                            }
                        });
                    }
                }
            }
        );
    });

    socket.on('disconnect', function() {
        console.log("dis:" + socket.id);
        console.log(io.sockets.adapter.rooms);
    });

    socket.on('join', function(room_nickName) {
        var tmpArr = room_nickName.split(":");
        var room = tmpArr[0];
        var nickName = tmpArr[1];
        socket.username = nickName;

        if (socket.room) {
            socket.leave(socket.room);
        }

        socket.room = room;
        socket.join(socket.room);


    });
});