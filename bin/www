#!/usr/bin/env node
var debug = require('debug')('HX');
var app = require('../app');
var monk = require('monk');
var db = monk('localhost:27017/HX');

app.set('port', process.env.PORT || 3000);

var server = app.listen(app.get('port'), function() {
    debug('Express server listening on port ' + server.address().port);
});

var io = require('socket.io')(server);

var users={};

io.sockets.on('connection', function (socket) {
    socket.on('joinChat', function (name, fn) {
        //console.log(name);
        users[name] = socket.id;
        console.log(users);
        fn(socket.id);
    });
    //console.log(socket.handshake.query);
    console.log("new connect:" + socket.id);
    //console.log(io.sockets.adapter.rooms);
    socket.on('clientMessage', function(content) {
        socket.emit('serverMessage', '我: ' + content);
//
//        var broadcast = socket.broadcast;
//        var message = content;
//        if (socket.room) {
//            broadcast.to(socket.room);
//            //插入数据库
//            db.get('chat').insert(
//                {
//                    meetId: socket.room,
//                    from: socket.username,
//                    content: content
//                },
//                function(err, result)
//                {
//                    if (err)
//                    {
//                        //todo
//                    }
//                    else
//                    {
//                        broadcast.emit('serverMessage', socket.username + ': ' + message);
//                    }
//                }
//            );
//        }


    });

    socket.on('disconnect', function() {
        console.log("dis:" + socket.id);
        console.log(io.sockets.adapter.rooms);
    });

    socket.on('join', function(room_nickName) {
        var tmpArr = room_nickName.split(":");
        var room = tmpArr[0];
        var nickName = tmpArr[1];
        socket.username = nickName;

        if (socket.room) {
            socket.leave(socket.room);
        }

        socket.room = room;
        socket.join(socket.room);


    });
});